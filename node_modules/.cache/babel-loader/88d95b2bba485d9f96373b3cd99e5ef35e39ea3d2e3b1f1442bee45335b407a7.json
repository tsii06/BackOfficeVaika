{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tsiory\\\\Documents\\\\BackOffice\\\\Back_Front (2)\\\\Back_Front\\\\backfront\\\\src\\\\statistique\\\\Stat.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst Stat = ({\n  data,\n  labels\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  // Fonction pour générer une couleur aléatoire\n  const generateRandomColor = () => {\n    const red = Math.floor(Math.random() * 256);\n    const green = Math.floor(Math.random() * 256);\n    const blue = Math.floor(Math.random() * 256);\n    return `rgba(${red},${green},${blue},0.2)`;\n  };\n  useEffect(() => {\n    if (chartRef.current) {\n      const ctx = chartRef.current.getContext('2d');\n\n      // Détruire le graphique existant s'il y en a un\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n\n      // Utiliser la fonction generateColors\n\n      // Créer le nouveau graphique avec les couleurs générées\n      chartInstance.current = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Ma Statistique',\n            data: data,\n            borderColor: 'rgba(75,192,192,1)',\n            //   backgroundColor: backgroundColors,\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            x: {\n              type: 'category',\n              labels: labels,\n              grid: {\n                lineWidth: 1 // Largeur de la grille de l'axe x\n              }\n            },\n            y: {\n              type: 'linear',\n              position: 'left',\n              grid: {\n                lineWidth: 1 // Largeur de la grille de l'axe y\n              }\n            }\n          }\n        }\n      });\n    }\n\n    // Nettoyer le graphique lorsque le composant est démonté\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, [data, labels]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    width: 400,\n    height: 100\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 10\n  }, this);\n};\n_s(Stat, \"u5+iHnwD4hjVcMuzTE/TbI78erc=\");\n_c = Stat;\nexport default Stat;\nvar _c;\n$RefreshReg$(_c, \"Stat\");","map":{"version":3,"names":["React","useEffect","useRef","Chart","registerables","jsxDEV","_jsxDEV","register","Stat","data","labels","_s","chartRef","chartInstance","generateRandomColor","red","Math","floor","random","green","blue","current","ctx","getContext","destroy","type","datasets","label","borderColor","borderWidth","options","scales","x","grid","lineWidth","y","position","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Tsiory/Documents/BackOffice/Back_Front (2)/Back_Front/backfront/src/statistique/Stat.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { Chart, registerables } from 'chart.js';\r\n\r\nChart.register(...registerables);\r\n\r\nconst Stat: React.FC<{ data: number[]; labels: string[] }> = ({ data, labels }) => {\r\n  const chartRef = useRef<HTMLCanvasElement>(null);\r\n  const chartInstance = useRef<Chart | null>(null);\r\n\r\n \r\n  // Fonction pour générer une couleur aléatoire\r\n  const generateRandomColor = (): string => {\r\n    const red = Math.floor(Math.random() * 256);\r\n    const green = Math.floor(Math.random() * 256);\r\n    const blue = Math.floor(Math.random() * 256);\r\n    return `rgba(${red},${green},${blue},0.2)`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chartRef.current) {\r\n      const ctx = chartRef.current.getContext('2d');\r\n\r\n      // Détruire le graphique existant s'il y en a un\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n\r\n      // Utiliser la fonction generateColors\r\n\r\n\r\n      // Créer le nouveau graphique avec les couleurs générées\r\n      chartInstance.current = new Chart(ctx as CanvasRenderingContext2D, {\r\n        type: 'bar',\r\n        data: {\r\n          labels: labels,\r\n          datasets: [\r\n            {\r\n              label: 'Ma Statistique',\r\n              data: data,\r\n              borderColor: 'rgba(75,192,192,1)',\r\n           //   backgroundColor: backgroundColors,\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          scales: {\r\n            x: {\r\n                type: 'category',\r\n                labels: labels,\r\n                grid: {\r\n                  lineWidth: 1, // Largeur de la grille de l'axe x\r\n                },\r\n              },\r\n              y: {\r\n                type: 'linear',\r\n                position: 'left',\r\n                grid: {\r\n                  lineWidth: 1, // Largeur de la grille de l'axe y\r\n                },\r\n              },\r\n          },\r\n        },\r\n      });\r\n    }\r\n\r\n    // Nettoyer le graphique lorsque le composant est démonté\r\n    return () => {\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n    };\r\n  }, [data, labels]);\r\n\r\n  return <canvas ref={chartRef} width={400} height={100} />;\r\n};\r\n\r\nexport default Stat;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,KAAK,EAAEC,aAAa,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDH,KAAK,CAACI,QAAQ,CAAC,GAAGH,aAAa,CAAC;AAEhC,MAAMI,IAAoD,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACjF,MAAMC,QAAQ,GAAGV,MAAM,CAAoB,IAAI,CAAC;EAChD,MAAMW,aAAa,GAAGX,MAAM,CAAe,IAAI,CAAC;;EAGhD;EACA,MAAMY,mBAAmB,GAAGA,CAAA,KAAc;IACxC,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3C,MAAMC,KAAK,GAAGH,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;IAC7C,MAAME,IAAI,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;IAC5C,OAAQ,QAAOH,GAAI,IAAGI,KAAM,IAAGC,IAAK,OAAM;EAC5C,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd,IAAIW,QAAQ,CAACS,OAAO,EAAE;MACpB,MAAMC,GAAG,GAAGV,QAAQ,CAACS,OAAO,CAACE,UAAU,CAAC,IAAI,CAAC;;MAE7C;MACA,IAAIV,aAAa,CAACQ,OAAO,EAAE;QACzBR,aAAa,CAACQ,OAAO,CAACG,OAAO,CAAC,CAAC;MACjC;;MAEA;;MAGA;MACAX,aAAa,CAACQ,OAAO,GAAG,IAAIlB,KAAK,CAACmB,GAAG,EAA8B;QACjEG,IAAI,EAAE,KAAK;QACXhB,IAAI,EAAE;UACJC,MAAM,EAAEA,MAAM;UACdgB,QAAQ,EAAE,CACR;YACEC,KAAK,EAAE,gBAAgB;YACvBlB,IAAI,EAAEA,IAAI;YACVmB,WAAW,EAAE,oBAAoB;YACpC;YACGC,WAAW,EAAE;UACf,CAAC;QAEL,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,CAAC,EAAE;cACCP,IAAI,EAAE,UAAU;cAChBf,MAAM,EAAEA,MAAM;cACduB,IAAI,EAAE;gBACJC,SAAS,EAAE,CAAC,CAAE;cAChB;YACF,CAAC;YACDC,CAAC,EAAE;cACDV,IAAI,EAAE,QAAQ;cACdW,QAAQ,EAAE,MAAM;cAChBH,IAAI,EAAE;gBACJC,SAAS,EAAE,CAAC,CAAE;cAChB;YACF;UACJ;QACF;MACF,CAAC,CAAC;IACJ;;IAEA;IACA,OAAO,MAAM;MACX,IAAIrB,aAAa,CAACQ,OAAO,EAAE;QACzBR,aAAa,CAACQ,OAAO,CAACG,OAAO,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,CAACf,IAAI,EAAEC,MAAM,CAAC,CAAC;EAElB,oBAAOJ,OAAA;IAAQ+B,GAAG,EAAEzB,QAAS;IAAC0B,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3D,CAAC;AAAChC,EAAA,CAtEIH,IAAoD;AAAAoC,EAAA,GAApDpC,IAAoD;AAwE1D,eAAeA,IAAI;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}